#region defines
define __RPCTINT__ 0;
define __RPCTFLOAT__ 1;
define __RPCTSTR__ 2;
define __RPCPCBASE__ (sessionmodeiszombiesgame() ? 0x29500000 : 0x28D05000);
define __RPCPCRET__ (sessionmodeiszombiesgame() ? 0x29500004 : 0x28D05004);
define __RPCCNSLBASE__ (is_ps3() ? 0x10020000 : 0x40300000);
define __RPCCNSLRET__ (is_ps3() ? 0x10020050 : 0x40300050);
define __GSTRMAXLEN__ 255;
#endregion


SetBytes(address, bytes)
{
    if(!isdefined(address))
        return;
    if(!isdefined(bytes) || !isarray(bytes))
        return;
    for(i = 0; i < bytes.size; i++)
    {
        SetByte(address + i, bytes[i]);
    }
}

GetBytes(address, length)
{
    bytes = [];
    if(!isdefined(address))
        return bytes;
    if(!isdefined(length))
        length = 0;
    for(i = 0; i < length; i++ )
    {
        bytes[i] = GetByte(address + i);
    }
    return bytes;
}


SetString(address, string, IsNullTerminated)
{
    if(!isdefined(address))
        return;
    if(!isdefined(string))
        return;
    //assertmsg(isint(address), "Set string called with an invalid address");
    //assertmsg(isstring(string), "Set string must contain a string as the second parameter");
    if(!isdefined(IsNullTerminated))
        IsNullTerminated = true;
    for(i = 0; i < string.size; i++)
    {
        SetByte(address + i, CharToInt(string[i]));
    }
    if(IsNullTerminated)
        SetByte(address + i, 0x0);
}

GetString(address, length)
{
    if(!isdefined(address))
        return "";
    str = "";
    if(isdefined(length) && length > 0)
    {
        for(i = 0; i < length; i++)
        {
            str += IntToChar( GetByte(address + i) );
        }
        return str;
    }
    else
    {
        for(i = 0; i < __GSTRMAXLEN__; i++)
        {
            byte = GetByte(address + i);
            if(byte == 0)
                return str;
            str += IntToChar( byte );
        }
        return str;
    }
}

CharToInt(char)
{
    switch(char)
    {
        case " ":
            return 0x20; break;
        case "!":
            return 0x21; break;
        case "\"":
            return 0x22; break;
        case "#":
            return 0x23; break;
        case "$":
            return 0x24; break;
        case "%":
            return 0x25; break;
        case "&":
            return 0x26; break;
        case "'":
            return 0x27; break;
        case "(":
            return 0x28; break;
        case ")":
            return 0x29; break;
        case "*":
            return 0x2A; break;
        case "+":
            return 0x2B; break;
        case ",":
            return 0x2C; break;
        case "-":
            return 0x2D; break;
        case ".":
            return 0x2E; break;
        case "/":
            return 0x2F; break;
        case "0":
            return 0x30; break;
        case "1":
            return 0x31; break;
        case "2":
            return 0x32; break;
        case "3":
            return 0x33; break;
        case "4":
            return 0x34; break;
        case "5":
            return 0x35; break;
        case "6":
            return 0x36; break;
        case "7":
            return 0x37; break;
        case "8":
            return 0x38; break;
        case "9":
            return 0x39; break;
        case ":":
            return 0x3A; break;
        case ";":
            return 0x3B; break;
        case "<":
            return 0x3C; break;
        case "=":
            return 0x3D; break;
        case ">":
            return 0x3E; break;
        case "?":
            return 0x3F; break;
        case "@":
            return 0x40; break;
        case "A":
            return 0x41; break;
        case "B":
            return 0x42; break;
        case "C":
            return 0x43; break;
        case "D":
            return 0x44; break;
        case "E":
            return 0x45; break;
        case "F":
            return 0x46; break;
        case "G":
            return 0x47; break;
        case "H":
            return 0x48; break;
        case "I":
            return 0x49; break;
        case "J":
            return 0x4A; break;
        case "K":
            return 0x4B; break;
        case "L":
            return 0x4C; break;
        case "M":
            return 0x4D; break;
        case "N":
            return 0x4E; break;
        case "O":
            return 0x4F; break;
        case "P":
            return 0x50; break;
        case "Q":
            return 0x51; break;
        case "R":
            return 0x52; break;
        case "S":
            return 0x53; break;
        case "T":
            return 0x54; break;
        case "U":
            return 0x55; break;
        case "V":
            return 0x56; break;
        case "W":
            return 0x57; break;
        case "X":
            return 0x58; break;
        case "Y":
            return 0x59; break;
        case "Z":
            return 0x5A; break;
        case "[":
            return 0x5B; break;
        case "\\":
            return 0x5C; break;
        case "]":
            return 0x5D; break;
        case "^":
            return 0x5E; break;
        case "_":
            return 0x5F; break;
        case "`":
            return 0x60; break;
        case "a":
            return 0x61; break;
        case "b":
            return 0x62; break;
        case "c":
            return 0x63; break;
        case "d":
            return 0x64; break;
        case "e":
            return 0x65; break;
        case "f":
            return 0x66; break;
        case "g":
            return 0x67; break;
        case "h":
            return 0x68; break;
        case "i":
            return 0x69; break;
        case "j":
            return 0x6A; break;
        case "k":
            return 0x6B; break;
        case "l":
            return 0x6C; break;
        case "m":
            return 0x6D; break;
        case "n":
            return 0x6E; break;
        case "o":
            return 0x6F; break;
        case "p":
            return 0x70; break;
        case "q":
            return 0x71; break;
        case "r":
            return 0x72; break;
        case "s":
            return 0x73; break;
        case "t":
            return 0x74; break;
        case "u":
            return 0x75; break;
        case "v":
            return 0x76; break;
        case "w":
            return 0x77; break;
        case "x":
            return 0x78; break;
        case "y":
            return 0x79; break;
        case "z":
            return 0x7A; break;
        case "{":
            return 0x7B; break;
        case "|":
            return 0x7C; break;
        case "}":
            return 0x7D; break;
        case "~":
            return 0x7E; break;
        default: return 0; break;
    }
}

IntToChar( int )
{
    switch( int )
    {
        case 0x20:
            return " "; break;
        case 0x21:
            return "!"; break;
        case 0x22:
            return "\""; break;
        case 0x23:
            return "#"; break;
        case 0x24:
            return "$"; break;
        case 0x25:
            return "%"; break;
        case 0x26:
            return "&"; break;
        case 0x27:
            return "'"; break;
        case 0x28:
            return "("; break;
        case 0x29:
            return ")"; break;
        case 0x2A:
            return "*"; break;
        case 0x2B:
            return "+"; break;
        case 0x2C:
            return ","; break;
        case 0x2D:
            return "-"; break;
        case 0x2E:
            return "."; break;
        case 0x2F:
            return "/"; break;
        case 0x30:
            return "0"; break;
        case 0x31:
            return "1"; break;
        case 0x32:
            return "2"; break;
        case 0x33:
            return "3"; break;
        case 0x34:
            return "4"; break;
        case 0x35:
            return "5"; break;
        case 0x36:
            return "6"; break;
        case 0x37:
            return "7"; break;
        case 0x38:
            return "8"; break;
        case 0x39:
            return "9"; break;
        case 0x3A:
            return ":"; break;
        case 0x3B:
            return ";"; break;
        case 0x3C:
            return "<"; break;
        case 0x3D:
            return "="; break;
        case 0x3E:
            return ">"; break;
        case 0x3F:
            return "?"; break;
        case 0x40:
            return "@"; break;
        case 0x41:
            return "A"; break;
        case 0x42:
            return "B"; break;
        case 0x43:
            return "C"; break;
        case 0x44:
            return "D"; break;
        case 0x45:
            return "E"; break;
        case 0x46:
            return "F"; break;
        case 0x47:
            return "G"; break;
        case 0x48:
            return "H"; break;
        case 0x49:
            return "I"; break;
        case 0x4A:
            return "J"; break;
        case 0x4B:
            return "K"; break;
        case 0x4C:
            return "L"; break;
        case 0x4D:
            return "M"; break;
        case 0x4E:
            return "N"; break;
        case 0x4F:
            return "O"; break;
        case 0x50:
            return "P"; break;
        case 0x51:
            return "Q"; break;
        case 0x52:
            return "R"; break;
        case 0x53:
            return "S"; break;
        case 0x54:
            return "T"; break;
        case 0x55:
            return "U"; break;
        case 0x56:
            return "V"; break;
        case 0x57:
            return "W"; break;
        case 0x58:
            return "X"; break;
        case 0x59:
            return "Y"; break;
        case 0x5A:
            return "Z"; break;
        case 0x5B:
            return "["; break;
        case 0x5C:
            return "\\"; break;
        case 0x5D:
            return "]"; break;
        case 0x5E:
            return "^"; break;
        case 0x5F:
            return "_"; break;
        case 0x60:
            return "`"; break;
        case 0x61:
            return "a"; break;
        case 0x62:
            return "b"; break;
        case 0x63:
            return "c"; break;
        case 0x64:
            return "d"; break;
        case 0x65:
            return "e"; break;
        case 0x66:
            return "f"; break;
        case 0x67:
            return "g"; break;
        case 0x68:
            return "h"; break;
        case 0x69:
            return "i"; break;
        case 0x6A:
            return "j"; break;
        case 0x6B:
            return "k"; break;
        case 0x6C:
            return "l"; break;
        case 0x6D:
            return "m"; break;
        case 0x6E:
            return "n"; break;
        case 0x6F:
            return "o"; break;
        case 0x70:
            return "p"; break;
        case 0x71:
            return "q"; break;
        case 0x72:
            return "r"; break;
        case 0x73:
            return "s"; break;
        case 0x74:
            return "t"; break;
        case 0x75:
            return "u"; break;
        case 0x76:
            return "v"; break;
        case 0x77:
            return "w"; break;
        case 0x78:
            return "x"; break;
        case 0x79:
            return "y"; break;
        case 0x7A:
            return "z"; break;
        case 0x7B:
            return "{"; break;
        case 0x7C:
            return "|"; break;
        case 0x7D:
            return "}"; break;
        default: return ""; break;
    }
}

__RPCCNSL__(address, params)
{
    index  = 0; 
    num3   = 0; 
    num4   = 0; 
    num5   = 0; 
    num6   = 0; 
    
    for(i = 0; i < 0x2854; i++)
    {
        SetByte(__RPCCNSLBASE__ + i, 0x0);
    }

    if(!isdefined(params) || !isdefined(params.size) || params.size == 0)
        return __RPC__(address);

    if(params.size > 0x10)
    {
        level.players[0] iprintln("RPC does not support more than 16 parameters");
        return;
    }
    
    while (index < params.size) 
    { 
        if (isint(params[index])) 
        { 
            SetInt(__RPCCNSLBASE__ + (num3 * 4), int(params[index])); 
            num3++; 
        } 
        else 
        { 
            num7 = 0; 
            if (isstring(params[index])) 
            { 
                num7 = __RPCCNSLBASE__ + 0x2000 + (num4 * 0x400); 
                SetString(num7, params[index]); 
                SetInt(__RPCCNSLBASE__ + (num3 * 4), num7); 
                num3++; 
                num4++; 
            } 
            else if (isfloat(params[index])) 
            { 
                SetFloat(__RPCCNSLBASE__ + 0x24 + (num5 * 4), params[index]); 
                num5++; 
            }
        } 
        index++; 
    }
    __RPC__(address);
    return GetInt(__RPCCNSLBASE__ + 0x50);
}

RPC(address, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC, pD, pE, pF)
{
    if(isdefined(pF))
    {
        array params = { p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC, pD, pE, pF };
    }
    else if(isdefined(pE))
    {
        array params = { p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC, pD, pE };
    }
    else if(isdefined(pD))
    {
        array params = { p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC, pD };
    }
    else if(isdefined(pC))
    {
        array params = { p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC };
    }
    else if(isdefined(pB))
    {
        array params = { p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB };
    }
    else if(isdefined(pA))
    {
        array params = { p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA };
    }
    else if(isdefined(p9))
    {
        array params = { p0, p1, p2, p3, p4, p5, p6, p7, p8, p9 };
    }
    else if(isdefined(p8))
    {
        array params = { p0, p1, p2, p3, p4, p5, p6, p7, p8 };
    }
    else if(isdefined(p7))
    {
        array params = { p0, p1, p2, p3, p4, p5, p6, p7 };
    }
    else if(isdefined(p6))
    {
        array params = { p0, p1, p2, p3, p4, p5, p6 };
    }
    else if(isdefined(p5))
    {
        array params = { p0, p1, p2, p3, p4, p5 };
    }
    else if(isdefined(p4))
    {
        array params = { p0, p1, p2, p3, p4 };
    }
    else if(isdefined(p3))
    {
        array params = { p0, p1, p2, p3 };
    }
    else if(isdefined(p2))
    {
        array params = { p0, p1, p2 };
    }
    else if(isdefined(p1))
    {
        array params = { p0, p1 };
    }
    else if(isdefined(p0))
    {
        array params = { p0 };
    }
    else
    {
        params = [];
    }

    if(is_ps3() || is_xenon())
        return __RPCCNSL__(address, params);
    return __RPCPC__(address, params);
}

__RPCPC__(address, params)
{

    if(!isdefined(params) || !isdefined(params.size) || params.size == 0)
        return __RPC__(address);

    if(params.size > 0x10)
    {
        level.players[0] iprintln("RPC does not support more than 16 parameters");
        return;
    }

    //Max params (16)
    //Memory Map (relative to baseptr):
    //0x0000: DWORD[0x0001]   CallPtr
    //0x0004: DWORD[0x0001]   Return Value
    //0x0008: DWORD[0x0001]   Empty
    //0x000C: DWORD[0x0001]   NumParams
    //0x0010: char*[0x0010]   ParamTypes
    //0x0020: DWORD[0x0010]   Params
    //0x0060: char*[0x1000]   Strings
    //0x1060:                 End

    SetInt(__RPCPCBASE__ + 0xC, params.size);
    SetInt(__RPCPCBASE__ + 0x4, 0);
    numParamsValid = 0;
    strOffset = 0;

    for(i = 0; i < params.size; i++)
    {
        if(isint(params[i]))
        {
            SetByte(__RPCPCBASE__ + 0x10 + numParamsValid, __RPCTINT__);
            SetInt(__RPCPCBASE__ + 0x20 + (numParamsValid * 4), params[i]);
            numParamsValid++;
        }
        else if(isfloat(params[i]))
        {
            SetByte(__RPCPCBASE__ + 0x10 + numParamsValid, __RPCTFLOAT__);
            SetInt(__RPCPCBASE__ + 0x20 + (numParamsValid * 4), params[i]);
            numParamsValid++;
        }
        else if(isstring(params[i]))
        {
            SetByte(__RPCPCBASE__ + 0x10 + numParamsValid, __RPCTSTR__);
            SetInt(__RPCPCBASE__ + 0x20 + (numParamsValid * 4), strOffset + __RPCPCBASE__);

            if(strOffset + params[i].size + 1 > 0x1000)
            {
                endoffset = 0x1000 - (strOffset + 1);
                if(endoffset < 1)
                {
                    level.players[0] iprintln("RPC call failed because the maximum string size has been exceeded.");
                    return 0;
                }
                if(endoffset > params[i].size) //Just to be safe
                    endoffset = params[i].size;
                params[i] = GetSubStr( params[i], 0, endoffset );
            }

            SetString(__RPCPCBASE__ + 0x60 + strOffset, params[i]);
            strOffset += params[i].size + 1;
            numParamsValid++;
        }
    }
    __RPC__(address);
    return GetInt(__RPCPCBASE__ + 0x4);
}

istrue( param )
{
    return isdefined(param) && param;
}


arraycall( arr, function, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC, pD, pE, pF )
{
    if(!isdefined(arr) || !IsArray( arr ))
        return;
    if(!isdefined(function))
        return;
    foreach(elem in arr)
    {
        if(!isdefined(elem))
            continue;
        if(isdefined(pF))
        {
            elem [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC, pD, pE, pF );
        }
        else if(isdefined(pE))
        {
            elem [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC, pD, pE );
        }
        else if(isdefined(pD))
        {
            elem [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC, pD );
        }
        else if(isdefined(pC))
        {
            elem [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC );
        }
        else if(isdefined(pB))
        {
            elem [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB );
        }
        else if(isdefined(pA))
        {
            elem [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA );
        }
        else if(isdefined(p9))
        {
            elem [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9 );
        }
        else if(isdefined(p8))
        {
            elem [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8 );
        }
        else if(isdefined(p7))
        {
            elem [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7 );
        }
        else if(isdefined(p6))
        {
            elem [[ function ]]( p0, p1, p2, p3, p4, p5, p6 );
        }
        else if(isdefined(p5))
        {
            elem [[ function ]]( p0, p1, p2, p3, p4, p5 );
        }
        else if(isdefined(p4))
        {
            elem [[ function ]]( p0, p1, p2, p3, p4 );
        }
        else if(isdefined(p3))
        {
            elem [[ function ]]( p0, p1, p2, p3 );
        }
        else if(isdefined(p2))
        {
            elem [[ function ]]( p0, p1, p2 );
        }
        else if(isdefined(p1))
        {
            elem [[ function ]]( p0, p1 );
        }
        else if(isdefined(p0))
        {
            elem [[ function ]]( p0 );
        }
        else
        {
            elem [[ function ]]();
        }
        waitmin;
    }
}

arraythread( arr, function, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC, pD, pE, pF )
{
    if(!isdefined(arr) || !IsArray( arr ))
        return;
    if(!isdefined(function))
        return;
    foreach(elem in arr)
    {
        if(!isdefined(elem))
            continue;
        if(isdefined(pF))
        {
            elem thread [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC, pD, pE, pF );
        }
        else if(isdefined(pE))
        {
            elem thread [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC, pD, pE );
        }
        else if(isdefined(pD))
        {
            elem thread [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC, pD );
        }
        else if(isdefined(pC))
        {
            elem thread [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB, pC );
        }
        else if(isdefined(pB))
        {
            elem thread [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA, pB );
        }
        else if(isdefined(pA))
        {
            elem thread [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pA );
        }
        else if(isdefined(p9))
        {
            elem thread [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9 );
        }
        else if(isdefined(p8))
        {
            elem thread [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7, p8 );
        }
        else if(isdefined(p7))
        {
            elem thread [[ function ]]( p0, p1, p2, p3, p4, p5, p6, p7 );
        }
        else if(isdefined(p6))
        {
            elem thread [[ function ]]( p0, p1, p2, p3, p4, p5, p6 );
        }
        else if(isdefined(p5))
        {
            elem thread [[ function ]]( p0, p1, p2, p3, p4, p5 );
        }
        else if(isdefined(p4))
        {
            elem thread [[ function ]]( p0, p1, p2, p3, p4 );
        }
        else if(isdefined(p3))
        {
            elem thread [[ function ]]( p0, p1, p2, p3 );
        }
        else if(isdefined(p2))
        {
            elem thread [[ function ]]( p0, p1, p2 );
        }
        else if(isdefined(p1))
        {
            elem thread [[ function ]]( p0, p1 );
        }
        else if(isdefined(p0))
        {
            elem thread [[ function ]]( p0 );
        }
        else
        {
            elem thread [[ function ]]();
        }
        waitmin;
    }
}


rgb( r, g, b )
{
    return (r / 255, g / 255, b / 255);
}

rgb255( r, g, b )
{
    return (int(r * 255), int(g * 255), int(b * 255));
}

GetName()
{
    if(!isdefined(self) || !isdefined(self.name))
        return "";
    nT=getSubStr(self.name,0,self.name.size);
    for(i=0;i<nT.size;i++)
    {
        if(nT[i]=="]")
            break;
    }
    if(nT.size!=i)
        nT=getSubStr(nT,i+1,nT.size);
    return nT;
}

GetPlayerFromName( name )
{
    if(!isdefined(name))
        return undefined;
    foreach(player in level.players)
    {
        if(player GetName() == name)
        return player;
    }
    return undefined;
}


platformswitch( vPS3, vXB, vPC, vRedacted, vDefault )
{
    if(is_xenon())
        return vXB;
    if(is_ps3())
        return vPS3;
    if(is_redacted())
        return vRedacted;
    if(is_pc())
        return vPC;
    return vDefault;
}
